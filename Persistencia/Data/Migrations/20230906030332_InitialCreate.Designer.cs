// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(IncidenciasContext))]
    [Migration("20230906030332_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionArea")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("Dominio.AreaPersona", b =>
                {
                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int");

                    b.HasKey("IdArea", "IdPersona");

                    b.HasIndex("IdPersona");

                    b.ToTable("AreaPersonas");
                });

            modelBuilder.Entity("Dominio.CategoriaContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreCategoriaContacto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CategoriaContacto", (string)null);
                });

            modelBuilder.Entity("Dominio.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionContacto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdCategoriaContacto")
                        .HasColumnType("int");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoCon")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoriaContacto");

                    b.HasIndex("IdPersona");

                    b.HasIndex("IdTipoCon");

                    b.ToTable("Contacto", (string)null);
                });

            modelBuilder.Entity("Dominio.DetalleIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionDetalleIncidencia")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int>("IdIncidencia")
                        .HasColumnType("int");

                    b.Property<int>("IdNivelIncidencia")
                        .HasColumnType("int");

                    b.Property<int>("IdPeriferico")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoIncidencia")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdIncidencia");

                    b.HasIndex("IdNivelIncidencia");

                    b.HasIndex("IdPeriferico");

                    b.HasIndex("IdTipoIncidencia");

                    b.ToTable("DetalleIncidencia", (string)null);
                });

            modelBuilder.Entity("Dominio.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Estado", (string)null);
                });

            modelBuilder.Entity("Dominio.Incidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionIncidencia")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int>("IdLugar")
                        .HasColumnType("int");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdLugar");

                    b.HasIndex("IdPersona");

                    b.ToTable("Incidencia", (string)null);
                });

            modelBuilder.Entity("Dominio.Lugar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionLugar")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NombreLugar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Lugar", (string)null);
                });

            modelBuilder.Entity("Dominio.NivelIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionNivelIncidencia")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NombreNivelIncidencia")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("NivelIncidencia", (string)null);
                });

            modelBuilder.Entity("Dominio.Periferico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombrePeriferico")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Periferico", (string)null);
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApellidoPersona")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DireccionPersona")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnType("int");

                    b.Property<string>("NombrePersona")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("Persona", (string)null);
                });

            modelBuilder.Entity("Dominio.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionRol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionTipoContacto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TipoContacto", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbreviaturaTipoDocumento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreTipoDocumento")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TipoDocumento", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescripcionTipoIncidencia")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NombreTipoIncidencia")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TipoIncidencia", (string)null);
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Username", "Email")
                        .IsUnique()
                        .HasDatabaseName("IX_MiIndice");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Dominio.UsuariosRoles", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.HasKey("IdUsuario", "IdRol");

                    b.HasIndex("IdRol");

                    b.ToTable("UsuariosRoles");
                });

            modelBuilder.Entity("Dominio.AreaPersona", b =>
                {
                    b.HasOne("Dominio.Area", "Area")
                        .WithMany("AreaPersonas")
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("AreaPersonas")
                        .HasForeignKey("IdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.Contacto", b =>
                {
                    b.HasOne("Dominio.CategoriaContacto", "CategoriaContacto")
                        .WithMany("Contactos")
                        .HasForeignKey("IdCategoriaContacto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("Contactos")
                        .HasForeignKey("IdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.TipoContacto", "TipoContacto")
                        .WithMany("Contactos")
                        .HasForeignKey("IdTipoCon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaContacto");

                    b.Navigation("Persona");

                    b.Navigation("TipoContacto");
                });

            modelBuilder.Entity("Dominio.DetalleIncidencia", b =>
                {
                    b.HasOne("Dominio.Estado", "Estado")
                        .WithMany("DetalleIncidencias")
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Incidencia", "Incidencia")
                        .WithMany("DetalleIncidencias")
                        .HasForeignKey("IdIncidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.NivelIncidencia", "NivelIncidencia")
                        .WithMany("DetalleIncidencias")
                        .HasForeignKey("IdNivelIncidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Periferico", "Periferico")
                        .WithMany("DetalleIncidencias")
                        .HasForeignKey("IdPeriferico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.TipoIncidencia", "TipoIncidencia")
                        .WithMany("DetalleIncidencias")
                        .HasForeignKey("IdTipoIncidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Incidencia");

                    b.Navigation("NivelIncidencia");

                    b.Navigation("Periferico");

                    b.Navigation("TipoIncidencia");
                });

            modelBuilder.Entity("Dominio.Incidencia", b =>
                {
                    b.HasOne("Dominio.Area", "Area")
                        .WithMany("Incidencias")
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Estado", "Estado")
                        .WithMany("Incidencias")
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Lugar", "Lugar")
                        .WithMany("Incidencias")
                        .HasForeignKey("IdLugar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("Incidencias")
                        .HasForeignKey("IdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Estado");

                    b.Navigation("Lugar");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.Lugar", b =>
                {
                    b.HasOne("Dominio.Area", null)
                        .WithMany("Lugares")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.HasOne("Dominio.TipoDocumento", "TipoDocumento")
                        .WithMany("Personas")
                        .HasForeignKey("IdTipoDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Dominio.UsuariosRoles", b =>
                {
                    b.HasOne("Dominio.Rol", "Rol")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Usuario", "Usuario")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Area", b =>
                {
                    b.Navigation("AreaPersonas");

                    b.Navigation("Incidencias");

                    b.Navigation("Lugares");
                });

            modelBuilder.Entity("Dominio.CategoriaContacto", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Dominio.Estado", b =>
                {
                    b.Navigation("DetalleIncidencias");

                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Dominio.Incidencia", b =>
                {
                    b.Navigation("DetalleIncidencias");
                });

            modelBuilder.Entity("Dominio.Lugar", b =>
                {
                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Dominio.NivelIncidencia", b =>
                {
                    b.Navigation("DetalleIncidencias");
                });

            modelBuilder.Entity("Dominio.Periferico", b =>
                {
                    b.Navigation("DetalleIncidencias");
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.Navigation("AreaPersonas");

                    b.Navigation("Contactos");

                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Dominio.Rol", b =>
                {
                    b.Navigation("UsuariosRoles");
                });

            modelBuilder.Entity("Dominio.TipoContacto", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Dominio.TipoDocumento", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Dominio.TipoIncidencia", b =>
                {
                    b.Navigation("DetalleIncidencias");
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.Navigation("UsuariosRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
